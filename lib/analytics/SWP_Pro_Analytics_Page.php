<?php

/**
 * The SWP_Pro_Analytics_Page class will control the entire layout and build of
 * the analytics page in the admin area. It will generate charts, lists, and
 * practical guides to help the user get the absolute most out of the plugin as
 * possible.
 *
 * @since 4.2.0 | 22 AUG 2020 | Created
 *
 */
class SWP_Pro_Analytics_Page {


	/**
	 * The $tabs property will contain a key => value index of each tab of content
	 * that we plan on using on the analytics page. The key will allow us to link
	 * the item in the menu to the container for the content. The name will
	 * appear visually to the user.
	 *
	 * @var array
	 *
	 */
	private $tabs = array(
		'trends' => 'Sitewide Trends',
		'posts' => 'Posts Analysis'
	);


	/**
	 * The $html property will contain a string of html as it is generated by the
	 * various class methods. At the end, we'll be able to simply return or echo
	 * this property to display our page.
	 *
	 * @var string
	 *
	 */
	private $html = '';


	/**
	 * The constrcutor will fire everything up by simply adding our
	 * generate_admin_page() to the admin_menu() hook.
	 *
	 * @since  4.2.0 | 22 AUG 2020 | Created
	 * @param  void
	 * @return void
	 *
	 */
	public function __construct() {
		add_action( 'admin_menu', array( $this, 'generate_admin_page') );
	}


	/**
	 * The generate_admin_page() will make use of the add_submenu_page() function
	 * to add this underneath of the main Social Warfare settings in the admin
	 * sidebar menu. It will also register our render_html() to run in order to
	 * render out the actual html of the page. We'll also register in some CSS
	 * styles for this page.
	 *
	 * @since  4.2.0 | 22 AUG 2020 | Created
	 * @see    add_submenu_page()
	 *         https://developer.wordpress.org/reference/functions/add_submenu_page/
	 * @param  void
	 * @return void
	 *
	 */
	public function generate_admin_page() {

		// Declare the menu link
		$swp_analytics_menu = add_submenu_page(
			'social-warfare',
			'Social Analytics by Social Warfare',
			'Social Analytics',
			'manage_options',
			'social-warfare-analytics',
			array( $this, 'render_html'),
			5
		);

		// Queue up our method for registering CSS stylesheets.
		add_action( 'admin_print_styles-' . $swp_analytics_menu, array( $this, 'enqueue_assets' ) );
	}


	/**
	* Enqueue the Settings Page CSS & Javascript
	*
	* @since  4.2.0 | 22 AUG 2020 | Created
	* @param  void
	* @return void
	*
	*/
	public function enqueue_assets() {

		// The .min.css or .css suffix.
		$suffix     = SWP_Script::get_suffix();

		// Enqueue the admin-options-page.css file so we can just reuse that file.
		wp_enqueue_style(
			'swp_admin_options_css',
			SWP_PLUGIN_URL . "/assets/css/admin-options-page{$suffix}.css",
			array(),
			SWP_VERSION
		);

		wp_enqueue_script( 'jquery' );
		wp_enqueue_script( 'jquery-effects-core' );
		wp_enqueue_script( 'jquery-ui-core' );
		wp_enqueue_script( 'jquery-ui-widget' );
		wp_enqueue_script( 'jquery-ui-position' );
		wp_enqueue_media();
		wp_enqueue_script(
			'swp_admin_options_js',
			SWP_PLUGIN_URL . "/assets/js/admin-options-page{$suffix}.js",
			array( 'jquery', 'social_warfare_script' ),
			SWP_VERSION
		);
	}


	/**
	 * The render_html() method will generate and echo out all of the html that
	 * will appear on this page.
	 *
	 * @since  4.2.0 | 22 AUG 2020 | Created
	 * @param  void
	 * @return void
	 *
	 */
	public function render_html() {

		// Create the wrapper for the entire page
		$this->html .= '<div class="sw-admin-wrapper">';

		// Create the header menu.
		$this->html .= $this->generate_header_menu();

		/**
		 * A standalone method exists that is responsible for generating the
		 * content for each of our page tabs. This will loop through our tabs
		 * and call those methods dynamically. This will, in turn add the content
		 * for each tab to our $html class property.
		 *
		 */
		foreach( $this->tabs as $key => $name ) {
			$this->html .= '<div id="swp_'.$key.'" class="sw-admin-tab sw-grid sw-col-940">';
			$this->html .= call_user_func_array( array( $this, 'generate_' . $key . '_tab' ), array() );
			$this->html .= '</div>';
		}

		// Close the wrapper for the entire page.
		$this->html .= '</div>';

		// Echo the fully rendered html to the page.
		echo $this->html;
	}


	/**
	 * The private generate_header_menu() method will generate all of the html
	 * for our header menu. It will loop through the $tabs property and create a
	 * menu item for each tab that is on the page.
	 *
	 * @since  4.2.0 | 26 AUG 2020 | Created
	 * @param  void
	 * @return string The rendered html for this section.
	 *
	 */
	private function generate_header_menu() {

		// Create the wrapper and logo for the menu.
		$html = '<div class="sw-header-wrapper"><div class="sw-grid sw-col-940 sw-top-menu"><div class="sw-grid sw-col-700"><img class="sw-header-logo-pro" src="/wp-content/plugins/social-warfare/assets/images/admin-options-page/social-warfare-pro-light.png"><ul class="sw-header-menu">';

		// Loop through the $tabs property and create menu links.
		$i = 0;
		foreach( $this->tabs as $key => $name ) {
			$html .= '<li class="'.($i++ === 0 ? 'sw-active-tab' : '' ).'"><a class="sw-tab-selector" href="#" data-link="swp_'.$key.'"><span>'.$name.'</span></a></li>';
		}

		// Close the wrapper for the menu.
		$html .= '</ul></div><div class="sw-grid sw-col-220 sw-fit"></div><div class="sw-clearfix"></div></div></div>';

		// Return the string of html to the caller.
		return $html;
	}

	private function generate_trends_tab() {
		$html = '';

		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460')
					   ->render_html();

		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460 sw-fit')
					   ->set_interval('daily')
					   ->set_range(7)
					   ->render_html();

		$html .= '<div class="sw-clearfix"></div>';

		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460')
					   ->set_scope('all')
					   ->render_html();

		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460 sw-fit')
					   ->set_scope('all')
					   ->set_interval('daily')
					   ->set_range(7)
					   ->render_html();

		$html .= '<div class="sw-clearfix"></div>';
		return $html;
	}

	private function generate_posts_tab() {
		$html = 'Hello World';
		$html .= $this->generate_total_shares();
		return $html;
	}

	private function generate_total_shares() {
		global $wpdb, $swp_social_networks;
		$html = '';

		$query = "SELECT * FROM {$wpdb->prefix}swp_analytics WHERE post_id = 0 ORDER BY date DESC LIMIT 1";
		$results = $wpdb->get_row( $query, OBJECT );

		$html .= '<div class="swp-flex-row">';
		foreach( $results as $key => $value ) {
			if( in_array( $key, array('id','date','post_id') ) ) {
				continue;
			}

			if( 'total_shares' !== $key && false === $swp_social_networks[$key]->is_active() ) {
				continue;
			}

			$html .= '<div class="swp-total-share">'.$value.'</div>';

		}
		$html .= '</div>';
		return $html;
	}

}
